

#[cfg_attr(not(target_arch = "wasm32"), allow(unused_imports))]
#[cfg(test)]
mod ecdsa_tests {
    use bsv::{ECDSA, PrivateKey, SigningHash, Transaction};

		#[test]
		fn test_sign_from_tx_bytes() {
			let transaction = Transaction::from_hex("01000000011c54be3a1532689ddd7dce8c4858e5e5e5fe433b49d9c1b0ce79602521383d4a020000006a47304402204ddd065000a1c01ec3ddf3ac7caec0be97521d6cc1c9ebb530982c25233bca6502205c9c888ffc7d069d692e3bf45a62f89681d07d991867aad2dbef83373559a6c2412103e91fc049586a9e50f277643ce2a13174dcd1ab403cd0bae200589fa967f401a4ffffffff030000000000000000fd5102006a067477657463684d4502424945310291e4e1e5f13b7c429aa18402b8255f8bd5726208d266b510bbe63766c72988c9fe9b70dca720112b87f5869ce8649d2be0336e623902eab7803209474dad2bc53e2fe4c197e04a7001b33df92600ef564b28623fc428e0811f2891b57487698da7832cf091b3db231b6f5f7afae782969ec91d7858af56e5047b0692bc879dfef5508f341b924717ba00df223948d6c0f1dba25ed06e2fd981c87bb7e5cc0a169fdafeae5c3ff37946b6ba5780eec1374e7992ff8784d74279aff291f7540c4051d18c85ba5e7a98f336527db1a3a86895b9d5687da79b0da715e0218299dc077c5f42f1c81a7e35e1e98fb3be10b2b060b1c756116caad43dd88389f01bda778432ba982e6b1b2d239ef1147d2d4c6aaca7674231b5d24705a85c638fee54ac93bab6dd8ea11d929e15807aa630493080dccf04605385388b0f9e8e7c5cc98efdc888b1274782bfbb409e10a55a446eb08946e2a3ecfdb829d6de17b242035283919eccff87633538a3584ac7a0e06aa6962591c1c008d9cc1b024867f6605fc1ab180d3f5dcaef664ae4d6ca582f9180d225420caa539c6b81b61307184c026f5dd44483565505cbae2262428bbeee578b926ac343a8dcf6b16d382d5693ea54a983264ae70378cb6c3990a55fa8d247c71cfe9d268b6795bcf8022413d1d037c12db273a155d67c99143cd0083760d7a544fe35f7f6a7a16f1097202dfe0d27ad015dc70d945aedcfa89be68fce62fbdfd12318bd93d6bfa7dee98be1bd3fe6c0eeb0d47a5f76edf8bf600ffea0dd6afc5e08f2860c8f68b55e5c00f96930bc020000000000002e2026e4a5af9681ae29eb2e7db0db0e05ebf3ae22045dc13b495f5797ccbffc7a800221e8825479a87c7f758875acdf0d1300000000001976a914707a36e0060d0f71a507626008665591fbe1d23588ac00000000").unwrap();
			let private_key = PrivateKey::from_wif("L14RB6aQeLDGmjrsF7tMt8NidTyYBgfp2pNYUAfAXGAhqJCKw5nh").unwrap();

			let sig = ECDSA::sign_with_deterministic_k(&private_key, &transaction.to_bytes().unwrap(), SigningHash::Sha256d, true, true).unwrap();

			assert_eq!(sig.to_der_hex(), "30440220257ef0aa7817fd3ec680da0498dfe3d822ae2f752510ff16d22963b772a5f24902204dea3784b3dbf84d5c85f0803151678bb501fa6c3848bc82318c8aae035beced")
		}
}